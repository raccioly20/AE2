---
title: "Avaliando Series Temporais"
author: "Ricardo Accioly"
date: "`r Sys.Date()`"
output:
 html_document:
    toc: yes
    code_download: yes
---

```{r}
# parametros para imagens
knitr::opts_chunk$set(
  fig.width = 8,
  fig.asp = 0.618,
  fig.retina = 3,
  dpi = 300,
  out.width = "80%"
)
```

## Séries Temporais

Nestes exemplos vamos usar algumas bibliotecas do R que são usadas na análise de séries temporais financeiras e também na sua modelagem.

## Obtendo e Visualizando uma ST

Vamos inicialmente usando a biblioteca (pacote) quantmod fazer um download dos preços da Petrobras (PETR4) entre 2000 e 2022.

A biblioteca quantmod depende dos pacotes xts e do zoo que são dois pacotes usados para manipular dados de series temporais.

```{r}
library(quantmod)
getSymbols("PETR4.SA",from="2000-01-01", to="2022-09-30")
head(PETR4.SA)
# A biblioteca tem uma forma diferenciada de apresentação das series financeiras
chartSeries(PETR4.SA,theme="white")
```

Veja que os dados recebidos tem valores de abertura (open), alta (high), baixa (low) e fechamento (close)

```{r}
#| warning: false
summary(PETR4.SA)
```

## Vamos selecionar somente o fechamento (close)

Para trabalhar com somente uma das series vamos selecionar sua coluna de dados

```{r}
PETR4.SA.Close <- PETR4.SA[,"PETR4.SA.Close"]
chartSeries(PETR4.SA.Close,theme="white")
```

## Podemos extrair somente um ano?

Vamos usar os dados de 2000.

```{r}
PETR4_2000 <- PETR4.SA.Close["2000"]
chartSeries(PETR4_2000,theme="white")
```

## Podemos extrair um intervalo?

Vamos usar os dados de 2000 a 2001.

```{r}
PETR4_2000_2001 <- PETR4.SA.Close["2000/2001"] 
chartSeries(PETR4_2000_2001,theme="white")
```

## Vamos trabalhar com outro intervalo

Vamos usar dados de set/21 a set/22.

```{r}
PETR4.SA.Close <- PETR4.SA.Close["2021-09-01/2022-09-30"]
chartSeries(PETR4.SA.Close,theme="white")
```

## Visualizando o início e o fim da serie

Aqui vamos usar funções da xts visualizar diferentes periodos.

```{r}
first(PETR4.SA.Close, "month")
last(PETR4.SA.Close, "6 weeks")
```

## Usando o pacote astsa

Vamos usar algumas funcionalidades do pacote astsa que permite visualizações e modelagem de series temporais.

```{r}
library(astsa)
lag1.plot(PETR4.SA.Close,12, col=astsa.col(4, .3), pch=20, cex=2)
```

## Esta série é um ruído branco?

Primeiro vamos ver graficamente o FAC/ACF e a FACP/PACF e depois vamos usar o teste de Box-Pierce e Ljung-Box.

```{r}
acf2(PETR4.SA.Close)
Box.test(PETR4.SA.Close, lag=20, type = "Box-Pierce")
Box.test(PETR4.SA.Close, lag=20, type = "Ljung-Box")
```

## Vamos agora trabalhar com os log retornos das ações

Para obter os log retornos vamos usar uma função da biblioteca qrmtools.

```{r}
library(qrmtools)
petr4.logret <- returns(PETR4.SA.Close, method="logarithmic")
head(petr4.logret)
chartSeries(petr4.logret,theme="white")
```

## Esta série é um ruído branco?

Vamos usar o teste de Box-Pierce e Ljung-Box

```{r}
acf2(petr4.logret)
Box.test(petr4.logret, lag=20, type = "Box-Pierce")
Box.test(petr4.logret, lag=20, type = "Ljung-Box")
```

## Vamos avaliar de outra forma

No teste anterior usamos somente o lag = 20 para testar a série. Vamos usar a biblioteca astsa que faz este teste para vários lags além de avaliar outras características da série.

```{r}
sarima(petr4.logret,p=0,d=0,q=0)
```

## Podemos agragar valores diários de diversas formas

Para agregar valores de series temporais vamos usar a biblioteca xts

```{r}
library(xts)
petr4.logret.sem <- apply.weekly(petr4.logret, sum)
first(petr4.logret.sem, "2 week")
petr4.logret.men <- apply.monthly(petr4.logret, sum)
first(petr4.logret.men, "2 month")
```

## Os log retornos seguem uma distribuição normal?

Vamos usar alguma ferrametas gráficas para avaliar os dados de log-retorno

```{r}
mu <- mean(petr4.logret)
sigma <- sd(petr4.logret)
c(mu, sigma)
x <- sort(coredata(petr4.logret))
hist(x, breaks = "Sturges" , probability = TRUE)
lines(x, dnorm(x, mean = mu, sd = sigma), col = "red")
qqnorm(x)
qqline(x)
```

## Outra avaliação Jarque-Bera

```{r}
library(moments)
x <- sort(coredata(petr4.logret))
jarque.test(x)
```

## E o log retorno semanal?

Vamos usar alguma ferrametas gráficas para avaliar os dados de log-retorno

```{r}
mu <- mean(petr4.logret.sem)
sigma <- sd(petr4.logret.sem)
c(mu, sigma)
x <- sort(coredata(petr4.logret.sem))
hist(x, breaks = "Sturges" , probability = TRUE)
lines(x, dnorm(x, mean = mu, sd = sigma), col = "red")
qqnorm(x)
qqline(x)
```

## Outra avaliação Jarque-Bera

```{r}
library(moments)
x <- sort(coredata(petr4.logret.sem))
jarque.test(x)
```

## Vamos simular um processo AR(1)

Vamos usar as funções da biblioteca astsa.

```{r}
par(mfrow=c(2,1))                         
# na expressão abaixo ~ é igual a um espaço e == é o igual
tsplot(sarima.sim(ar= .9, n=100), col=4, ylab="", main=(expression(AR(1)~~~phi==+.9))) 
tsplot(sarima.sim(ar=-.9, n=100), col=4, ylab="", main=(expression(AR(1)~~~phi==-.9))) 
```

## Vamos simular um processo MA(1)

Vamos usar as funções da biblioteca astsa.

```{r}
par(mfrow=c(2,1))                                   
tsplot(sarima.sim(ma= .9, n=100), col=4, ylab="", main=(expression(MA(1)~~~theta==+.9)))    
tsplot(sarima.sim(ma=-.9, n=100), col=4, ylab="", main=(expression(MA(1)~~~theta==-.9)))    
```

## Vamos simular um AR(2)

Vamos usar outra função básica do R para simular um AR(2) para fazer a representação gráfica de um AR(2) através dos seus ACF e PACF.

```{r}
acf <- ARMAacf(ar=c(1.5,-.75), ma=0, 24)
pacf <- ARMAacf(ar=c(1.5,-.75), ma=0, 24, pacf=T)
par(mfrow=c(1,2))
plot(acf, type="h", xlab="lag")
abline(h=0)
plot(pacf, type="h", xlab="lag")
abline(h=0)
```

## Vamos analisar dados de Recrutamento

Recrutamento (índice do número de novos peixes) por um período de 453 meses que se passaram ao longo dos anos 1950-1987. O recrutamento é vagamente definido como um indicador de novos membros de uma população para a primeira fase de vida em que a mortalidade natural se estabiliza perto dos níveis adultos.

Estes dados estão na biblioteca astsa.

Vamos usar uma parte para ajustar o modelo e depois vamos ver como ficam as previsões com relação aos resultados reais.

```{r}
# library(astsa)
data(rec)
recr <- window(rec, start=c(1950,1), end=c(1985,9))
par(mfrow=c(2,1))
acf(recr, 24)
pacf(recr, 24)
acf2(recr)
```

## Que tal um AR(2)

Aqui usando comandos básicos do R.

```{r}
p <- 2
d <- 0
q <- 0
mod1 <- arima(recr,order=c(p,d,q),method="ML")
tsdiag(mod1)
```

## Previsões a partir do modelo ajustado

```{r}
rec.pr <- predict(mod1, n.ahead=24)
inf <- rec.pr$pred + rec.pr$se
sup <- rec.pr$pred - rec.pr$se
tsplot(recr, type="o", ylab="recrutamento", xlim=c(1980,1988))
lines(rec.pr$pred, col="red", type="o")
lines(inf, col="blue", lty="dashed")
lines(sup, col="blue", lty="dashed")
lines(rec)
abline(h=coef(mod1)[names(coef(mod1))=='intercept'])
```

## Usando a biblioteca ASTSA

```{r}
p <- 2
d <- 0
q <- 0
sarima(recr,p=p,d=d,q=q, gg=TRUE, col=4)
sarima.for(recr, n.ahead=24, p=2, d=0, q=0, plot=TRUE)
lines(rec)
```
