{
  "hash": "bd45bec62e2e7c24bb27019157d7889d",
  "result": {
    "markdown": "---\ntitle: \"Regularização de Modelos\"\nauthor: \"Ricardo Accioly\"\ndate: \"2022-10-06\"\noutput:\n html_document:\n    toc: yes\n    code_download: yes\n---\n\n\n## Regularização de modelos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# parametros para imagens\nknitr::opts_chunk$set(\n  fig.width = 8,\n  fig.asp = 0.73,\n  fig.retina = 3,\n  dpi = 300,\n  out.width = \"90%\"\n)\n```\n:::\n\n\n## Carregando Bibliotecas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(faraway)\nlibrary(glmnet)\n```\n:::\n\n\n## Carregando os dados\n\nNeste exercíco vamos ajustar um modelo de regressão linear múltipla ao conjunto de dados fat da biblioteca faraway.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"fat\")\ngordura <- fat\nstr(gordura)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t252 obs. of  18 variables:\n $ brozek : num  12.6 6.9 24.6 10.9 27.8 20.6 19 12.8 5.1 12 ...\n $ siri   : num  12.3 6.1 25.3 10.4 28.7 20.9 19.2 12.4 4.1 11.7 ...\n $ density: num  1.07 1.09 1.04 1.08 1.03 ...\n $ age    : int  23 22 22 26 24 24 26 25 25 23 ...\n $ weight : num  154 173 154 185 184 ...\n $ height : num  67.8 72.2 66.2 72.2 71.2 ...\n $ adipos : num  23.7 23.4 24.7 24.9 25.6 26.5 26.2 23.6 24.6 25.8 ...\n $ free   : num  135 161 116 165 133 ...\n $ neck   : num  36.2 38.5 34 37.4 34.4 39 36.4 37.8 38.1 42.1 ...\n $ chest  : num  93.1 93.6 95.8 101.8 97.3 ...\n $ abdom  : num  85.2 83 87.9 86.4 100 94.4 90.7 88.5 82.5 88.6 ...\n $ hip    : num  94.5 98.7 99.2 101.2 101.9 ...\n $ thigh  : num  59 58.7 59.6 60.1 63.2 66 58.4 60 62.9 63.1 ...\n $ knee   : num  37.3 37.3 38.9 37.3 42.2 42 38.3 39.4 38.3 41.7 ...\n $ ankle  : num  21.9 23.4 24 22.8 24 25.6 22.9 23.2 23.8 25 ...\n $ biceps : num  32 30.5 28.8 32.4 32.2 35.7 31.9 30.5 35.9 35.6 ...\n $ forearm: num  27.4 28.9 25.2 29.4 27.7 30.6 27.8 29 31.1 30 ...\n $ wrist  : num  17.1 18.2 16.6 18.2 17.7 18.8 17.7 18.8 18.2 19.2 ...\n```\n:::\n:::\n\n\n## Renomeando as variáveis\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngordura <- gordura %>% rename(densidade = density, idade = age, peso=weight, altura = height,\n                          livre = free, pescoco = neck, torax = chest, quadril = hip,\n                           coxa = thigh, joelho = knee, tornozelo = ankle, antebraco = forearm,\n                           pulso = wrist) %>% \n                            select(brozek, idade, peso, altura, pescoco,                                        torax, abdom, quadril, coxa, joelho, tornozelo, biceps,antebraco, pulso)                             \nstr(gordura)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t252 obs. of  14 variables:\n $ brozek   : num  12.6 6.9 24.6 10.9 27.8 20.6 19 12.8 5.1 12 ...\n $ idade    : int  23 22 22 26 24 24 26 25 25 23 ...\n $ peso     : num  154 173 154 185 184 ...\n $ altura   : num  67.8 72.2 66.2 72.2 71.2 ...\n $ pescoco  : num  36.2 38.5 34 37.4 34.4 39 36.4 37.8 38.1 42.1 ...\n $ torax    : num  93.1 93.6 95.8 101.8 97.3 ...\n $ abdom    : num  85.2 83 87.9 86.4 100 94.4 90.7 88.5 82.5 88.6 ...\n $ quadril  : num  94.5 98.7 99.2 101.2 101.9 ...\n $ coxa     : num  59 58.7 59.6 60.1 63.2 66 58.4 60 62.9 63.1 ...\n $ joelho   : num  37.3 37.3 38.9 37.3 42.2 42 38.3 39.4 38.3 41.7 ...\n $ tornozelo: num  21.9 23.4 24 22.8 24 25.6 22.9 23.2 23.8 25 ...\n $ biceps   : num  32 30.5 28.8 32.4 32.2 35.7 31.9 30.5 35.9 35.6 ...\n $ antebraco: num  27.4 28.9 25.2 29.4 27.7 30.6 27.8 29 31.1 30 ...\n $ pulso    : num  17.1 18.2 16.6 18.2 17.7 18.8 17.7 18.8 18.2 19.2 ...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fat\n# - brozek: Percentual de gordura corporal usando a equação de Brozek, 457/Densidade - 414,2\n# - siri:  Percentual de gordura corporal usando a equação de Siri, 495/Densidade - 450\n# - densidade: Densidade (gm/$cm^3$)\n# - idade: idade (anos)\n# - peso: Peso (libras)\n# - altura: Altura (polegadas)\n# - adipos: Índice de adiposidade = Peso/Altura$^2$ (kg/$m^2$)\n# - livre: Peso livre de gordura = (1 - fração de gordura corporal) * Peso, utilizando a fórmula de Brozek (lbs)\n# - pescoco: Circunferência do pescoço (cm)\n# - torax: Circunferência torácica (cm)\n# - abdom: Circunferência do abdômen (cm) no umbigo e nível com a crista ilíaca\n# - quadril: Circunferência do quadril (cm)\n# - coxa: Circunferência da coxa (cm)\n# - joelho: Circunferência do joelho (cm)\n# - tornozelo: Circunferência do tornozelo (cm)\n# - biceps: Circunferência estendida dos bíceps (cm)\n# - antebraco: Circunferência do antebraço (cm)\n# - pulso: Circunferência do pulso (cm) \n```\n:::\n\n\n## Conjunto de teste e treino\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: lattice\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'lattice'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:faraway':\n\n    melanoma\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'caret'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    lift\n```\n:::\n\n```{.r .cell-code}\nset.seed(1234)\ny <- gordura$brozek\nindice_teste <- createDataPartition(y, times = 1, p = 0.10, list = FALSE)\n\nconj_treino <- gordura %>% slice(-indice_teste)\nconj_teste <- gordura %>% slice(indice_teste)\n\nsummary(conj_treino)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     brozek          idade            peso           altura     \n Min.   : 0.00   Min.   :22.00   Min.   :118.5   Min.   :29.50  \n 1st Qu.:12.80   1st Qu.:35.75   1st Qu.:159.0   1st Qu.:68.25  \n Median :19.00   Median :43.50   Median :177.0   Median :70.25  \n Mean   :18.86   Mean   :44.78   Mean   :179.1   Mean   :70.16  \n 3rd Qu.:24.60   3rd Qu.:53.25   3rd Qu.:196.8   3rd Qu.:72.25  \n Max.   :45.10   Max.   :81.00   Max.   :363.1   Max.   :77.75  \n    pescoco          torax            abdom           quadril      \n Min.   :31.10   Min.   : 79.30   Min.   : 69.40   Min.   : 85.00  \n 1st Qu.:36.40   1st Qu.: 94.83   1st Qu.: 84.58   1st Qu.: 95.58  \n Median :37.90   Median : 99.75   Median : 90.90   Median : 99.35  \n Mean   :37.99   Mean   :100.80   Mean   : 92.52   Mean   : 99.93  \n 3rd Qu.:39.52   3rd Qu.:105.30   3rd Qu.: 99.72   3rd Qu.:103.28  \n Max.   :51.20   Max.   :136.20   Max.   :148.10   Max.   :147.70  \n      coxa           joelho        tornozelo         biceps     \n Min.   :47.20   Min.   :33.00   Min.   :19.10   Min.   :24.80  \n 1st Qu.:56.00   1st Qu.:36.90   1st Qu.:22.00   1st Qu.:30.30  \n Median :59.10   Median :38.40   Median :22.85   Median :32.30  \n Mean   :59.45   Mean   :38.56   Mean   :23.10   Mean   :32.34  \n 3rd Qu.:62.35   3rd Qu.:40.00   3rd Qu.:24.00   3rd Qu.:34.40  \n Max.   :87.30   Max.   :49.10   Max.   :33.90   Max.   :45.00  \n   antebraco         pulso      \n Min.   :21.00   Min.   :15.80  \n 1st Qu.:27.30   1st Qu.:17.60  \n Median :28.75   Median :18.30  \n Mean   :28.66   Mean   :18.22  \n 3rd Qu.:30.00   3rd Qu.:18.80  \n Max.   :34.90   Max.   :21.40  \n```\n:::\n\n```{.r .cell-code}\nstr(conj_treino)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t224 obs. of  14 variables:\n $ brozek   : num  12.6 6.9 24.6 10.9 27.8 20.6 19 12.8 5.1 12 ...\n $ idade    : int  23 22 22 26 24 24 26 25 25 23 ...\n $ peso     : num  154 173 154 185 184 ...\n $ altura   : num  67.8 72.2 66.2 72.2 71.2 ...\n $ pescoco  : num  36.2 38.5 34 37.4 34.4 39 36.4 37.8 38.1 42.1 ...\n $ torax    : num  93.1 93.6 95.8 101.8 97.3 ...\n $ abdom    : num  85.2 83 87.9 86.4 100 94.4 90.7 88.5 82.5 88.6 ...\n $ quadril  : num  94.5 98.7 99.2 101.2 101.9 ...\n $ coxa     : num  59 58.7 59.6 60.1 63.2 66 58.4 60 62.9 63.1 ...\n $ joelho   : num  37.3 37.3 38.9 37.3 42.2 42 38.3 39.4 38.3 41.7 ...\n $ tornozelo: num  21.9 23.4 24 22.8 24 25.6 22.9 23.2 23.8 25 ...\n $ biceps   : num  32 30.5 28.8 32.4 32.2 35.7 31.9 30.5 35.9 35.6 ...\n $ antebraco: num  27.4 28.9 25.2 29.4 27.7 30.6 27.8 29 31.1 30 ...\n $ pulso    : num  17.1 18.2 16.6 18.2 17.7 18.8 17.7 18.8 18.2 19.2 ...\n```\n:::\n\n```{.r .cell-code}\nsummary(conj_teste)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     brozek          idade            peso           altura     \n Min.   : 7.10   Min.   :24.00   Min.   :133.5   Min.   :65.00  \n 1st Qu.:13.15   1st Qu.:36.50   1st Qu.:158.6   1st Qu.:67.94  \n Median :19.05   Median :42.50   Median :167.8   Median :69.75  \n Mean   :19.60   Mean   :45.71   Mean   :177.3   Mean   :70.05  \n 3rd Qu.:24.10   3rd Qu.:54.75   3rd Qu.:198.8   3rd Qu.:71.81  \n Max.   :38.20   Max.   :72.00   Max.   :247.2   Max.   :76.00  \n    pescoco          torax            abdom           quadril      \n Min.   :33.60   Min.   : 88.20   Min.   : 73.70   Min.   : 88.50  \n 1st Qu.:36.30   1st Qu.: 93.83   1st Qu.: 86.08   1st Qu.: 95.03  \n Median :38.30   Median : 98.00   Median : 92.15   Median : 98.15  \n Mean   :38.01   Mean   :101.00   Mean   : 92.84   Mean   : 99.72  \n 3rd Qu.:38.95   3rd Qu.:106.72   3rd Qu.: 98.95   3rd Qu.:103.72  \n Max.   :42.10   Max.   :118.50   Max.   :115.60   Max.   :116.10  \n      coxa           joelho        tornozelo         biceps     \n Min.   :50.30   Min.   :34.50   Min.   :20.40   Min.   :27.90  \n 1st Qu.:56.23   1st Qu.:37.55   1st Qu.:22.20   1st Qu.:29.98  \n Median :57.35   Median :38.75   Median :22.70   Median :31.05  \n Mean   :59.06   Mean   :38.85   Mean   :23.09   Mean   :31.76  \n 3rd Qu.:62.20   3rd Qu.:39.73   3rd Qu.:23.80   3rd Qu.:32.27  \n Max.   :71.20   Max.   :45.00   Max.   :26.30   Max.   :38.50  \n   antebraco         pulso      \n Min.   :25.20   Min.   :16.90  \n 1st Qu.:27.27   1st Qu.:17.70  \n Median :28.60   Median :18.45  \n Mean   :28.68   Mean   :18.32  \n 3rd Qu.:30.07   3rd Qu.:18.85  \n Max.   :32.80   Max.   :19.90  \n```\n:::\n\n```{.r .cell-code}\nstr(conj_teste)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t28 obs. of  14 variables:\n $ brozek   : num  20.5 19 15.3 13.4 31.1 38.2 11.2 7.1 21.1 23.7 ...\n $ idade    : int  35 28 28 27 41 49 40 49 54 62 ...\n $ peso     : num  163 179 200 168 247 ...\n $ altura   : num  66 68 69.8 71.2 73.5 ...\n $ pescoco  : num  36.4 39.1 41.3 38.1 42.1 38.4 33.6 35.1 35.6 35.5 ...\n $ torax    : num  99.1 103.3 111.4 93 117 ...\n $ abdom    : num  92.8 95.9 98.8 79.1 115.6 ...\n $ quadril  : num  99.2 104.9 104.8 94.5 116.1 ...\n $ coxa     : num  63.1 63.5 63.4 57.3 71.2 61.9 53.3 52.6 55 56.6 ...\n $ joelho   : num  38.7 38 40.6 36.2 43.3 38.3 34.5 37.6 36.1 38.6 ...\n $ tornozelo: num  21.7 22.1 24.6 24.5 26.3 21.9 22.5 22.6 21.7 22.4 ...\n $ biceps   : num  31.1 32.5 33 29 37.3 32 27.9 38.5 29.6 31.5 ...\n $ antebraco: num  26.4 30.3 32.8 30 31.7 29.8 26.2 27.4 27.4 27.3 ...\n $ pulso    : num  16.9 18.4 19.9 18.8 19.7 17 17.3 18.5 17.4 18.6 ...\n```\n:::\n\n```{.r .cell-code}\nhead(conj_treino)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  brozek idade   peso altura pescoco torax abdom quadril coxa joelho tornozelo\n1   12.6    23 154.25  67.75    36.2  93.1  85.2    94.5 59.0   37.3      21.9\n2    6.9    22 173.25  72.25    38.5  93.6  83.0    98.7 58.7   37.3      23.4\n3   24.6    22 154.00  66.25    34.0  95.8  87.9    99.2 59.6   38.9      24.0\n4   10.9    26 184.75  72.25    37.4 101.8  86.4   101.2 60.1   37.3      22.8\n5   27.8    24 184.25  71.25    34.4  97.3 100.0   101.9 63.2   42.2      24.0\n6   20.6    24 210.25  74.75    39.0 104.5  94.4   107.8 66.0   42.0      25.6\n  biceps antebraco pulso\n1   32.0      27.4  17.1\n2   30.5      28.9  18.2\n3   28.8      25.2  16.6\n4   32.4      29.4  18.2\n5   32.2      27.7  17.7\n6   35.7      30.6  18.8\n```\n:::\n:::\n\n\n## Métodos de Regularização\n\nO pacote glmnet não usa a linguagem de formula, em particular nós devemos passar $x$ como uma matriz e $y$ como um vetor, pois não se usa a sintaxe $y \\sim x$. Com isso será necessário ajustar x e y. A função model.matrix() é particularmente útil para criar x; não só produz uma matriz correspondente as variáveis explicativas, **mas também transforma automaticamente quaisquer variáveis qualitativas em variáveis dummy. Esta última propriedade é importante porque o glmnet() só pode tomar insumos numéricos e quantitativos.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_treino <- model.matrix(brozek ~ . , data = conj_treino)[, -1]\ny_treino <- conj_treino$brozek\n\nx_teste <- model.matrix(brozek ~ . , data = conj_teste)[, -1]\ny_teste = conj_teste$brozek\n```\n:::\n\n\n## Regressão Ridge\n\nPrimeiro vamos ajustar um modelo de regressão Ridge. Isso é conseguido chamando `glmnet()` com `alpha=0`, se `alpha=1` então `glmnet()` ajusta um lasso.(veja o arquivo de ajuda).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Estabelecendo um grid de valores para lambda\ngrid <- 10^seq(-2, 10, length = 100)\najusreg.ridge <- glmnet(x_treino, y_treino, alpha=0, lambda = grid)\n```\n:::\n\n\nPor padrão, a função `glmnet()` executa a regressão ridge automaticamente selecionando a faixa de valores de $\\lambda$. No entanto, aqui nós escolhemos implementar usando uma grade de valores que variam de $\\lambda = 10^{-2}$ a $\\lambda = 10^{10}$, cobrindo toda a gama de cenários do modelo nulo contendo apenas o coeficiente linear até o ajuste dos mínimos quadrados.\n\nTambém podemos calcular o modelo para um valor particular de $\\lambda$ que não é um dos valores de grade. Observe que, por padrão, a função `glmnet()` padroniza as variáveis para que elas estejam na mesma escala. **Esta padronização é muito importante no caso da regressão Ridge, pois ela é afetada pela mudança de escala das variáveis explicativas.**\n\nAssociado a cada valor de $\\lambda$ existe um vetor de coeficientes de regressão de ridge, que é armazenado em uma matriz que pode ser acessada por 'coef()'. Neste caso, é uma matriz $14 \\times 100$, com 14 linhas (uma para cada preditor, mais uma para o coeficiente linear) e 100 colunas (uma para cada valor de $\\lambda$).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(coef(ajusreg.ridge))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  14 100\n```\n:::\n\n```{.r .cell-code}\nplot(ajusreg.ridge, xvar=\"lambda\", label=TRUE) # Representando os coeficientes\n```\n\n::: {.cell-output-display}\n![](Aula05A_files/figure-html/r1-1.png){width=90%}\n:::\n:::\n\n\nQuando $\\lambda$ é grande o esperado é que os coeficentes sejam pequenos e quando $\\lambda$ é pequeno os coeficientes assumem valores maiores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\najusreg.ridge$lambda[1] # Mostra primeiro valor de lambda\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1e+10\n```\n:::\n\n```{.r .cell-code}\ncoef(ajusreg.ridge)[,1] # Mostra os coeficientes associados com o primeiro valor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  (Intercept)         idade          peso        altura       pescoco \n 1.885536e+01  1.338553e-10  1.236410e-10 -1.600035e-10  1.169395e-09 \n        torax         abdom       quadril          coxa        joelho \n 4.956103e-10  4.493519e-10  5.088269e-10  6.527140e-10  1.261101e-09 \n    tornozelo        biceps     antebraco         pulso \n 9.163067e-10  1.030597e-09  1.086599e-09  2.221473e-09 \n```\n:::\n\n```{.r .cell-code}\najusreg.ridge$lambda[100] # Mostra centésimo valor de lambda\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01\n```\n:::\n\n```{.r .cell-code}\ncoef(ajusreg.ridge)[,100] # Mostra os coeficientes associados com o centésimo valor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  (Intercept)         idade          peso        altura       pescoco \n-12.665025839   0.046501055  -0.076440683  -0.071739239  -0.508989778 \n        torax         abdom       quadril          coxa        joelho \n -0.004699019   0.880707557  -0.249676597   0.270555234   0.041556722 \n    tornozelo        biceps     antebraco         pulso \n  0.131190982   0.205106982   0.421414914  -1.536327001 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotmo)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: Formula\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: plotrix\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: TeachingDemos\n```\n:::\n\n```{.r .cell-code}\nplot_glmnet(ajusreg.ridge)\n```\n\n::: {.cell-output-display}\n![](Aula05A_files/figure-html/r3-1.png){width=90%}\n:::\n:::\n\n\n## Cross-Validation no Ridge\n\nNós podemos usar o k-fold cross validation para identificar o melhor valor de $\\lambda$\n\nA biblioteca glmnet já tem internamente uma função para uso do crosss validation. O default são 10 envelopes de dados `nfold=10`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(21)\nridge_cv <- cv.glmnet(x_treino,y_treino, alpha=0) ## por padrão k=10\nplot(ridge_cv)\n```\n\n::: {.cell-output-display}\n![](Aula05A_files/figure-html/r4-1.png){width=90%}\n:::\n\n```{.r .cell-code}\nm_lamb <- ridge_cv$lambda.min  # Seleciona o lambda que minimiza o MSE (EQM) de treino\nm_lamb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6249388\n```\n:::\n\n```{.r .cell-code}\nlog(m_lamb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.4701016\n```\n:::\n\n```{.r .cell-code}\ncoef(ridge_cv, s=m_lamb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14 x 1 sparse Matrix of class \"dgCMatrix\"\n                      s1\n(Intercept) -8.319874051\nidade        0.091812033\npeso        -0.007728679\naltura      -0.160691835\npescoco     -0.363896737\ntorax        0.125326493\nabdom        0.499795486\nquadril     -0.043728201\ncoxa         0.205412068\njoelho      -0.022764635\ntornozelo   -0.013758365\nbiceps       0.126449185\nantebraco    0.320053910\npulso       -1.604822469\n```\n:::\n:::\n\n\n## Avaliando com conjunto de teste\n\nEm seguida avaliamos seu MSE no conjunto de teste, usando $\\lambda$ = m_lamb. Observe o uso da função 'predict()': desta vez temos previsões para um conjunto de teste, com o argumento `newx`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\najusreg.ridge2 <- glmnet(x_treino, y_treino, alpha=0, lambda = m_lamb)\ny_prev <- predict(ajusreg.ridge2, s = m_lamb, newx = x_teste)\n# Metricas de desempenho\nsqrt(mean((y_prev - y_teste)^2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.299097\n```\n:::\n:::\n\n\n## LASSO\n\nPrimeiro ajustamos com todos os dados como no caso do Ridge\n\n\n::: {.cell}\n\n```{.r .cell-code}\najusreg.lasso <- glmnet(x_treino,y_treino, alpha = 1)\nplot(ajusreg.lasso, xvar=\"lambda\", label=TRUE) # Representando os coeficientes\n```\n\n::: {.cell-output-display}\n![](Aula05A_files/figure-html/LASSO-1.png){width=90%}\n:::\n\n```{.r .cell-code}\nplot_glmnet(ajusreg.lasso)\n```\n\n::: {.cell-output-display}\n![](Aula05A_files/figure-html/LASSO-2.png){width=90%}\n:::\n:::\n\n\n## Validação Cruzada no LASSO\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_cv <- cv.glmnet(x_treino,y_treino, alpha = 1)\nplot(lasso_cv)\n```\n\n::: {.cell-output-display}\n![](Aula05A_files/figure-html/Lasso2-1.png){width=90%}\n:::\n\n```{.r .cell-code}\nm_lamb1 <- lasso_cv$lambda.min  # Seleciona o lambda que minimiza o MSE de treino\nm_lamb1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.02143833\n```\n:::\n\n```{.r .cell-code}\nlog(m_lamb1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -3.842575\n```\n:::\n\n```{.r .cell-code}\ncoef(lasso_cv, s=m_lamb1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14 x 1 sparse Matrix of class \"dgCMatrix\"\n                      s1\n(Intercept) -10.75177926\nidade         0.04473875\npeso         -0.06573034\naltura       -0.07857314\npescoco      -0.49517762\ntorax         .         \nabdom         0.85968374\nquadril      -0.22418970\ncoxa          0.23815551\njoelho        .         \ntornozelo     0.09359249\nbiceps        0.17940630\nantebraco     0.40651180\npulso        -1.49340953\n```\n:::\n:::\n\n\n## Avaliando com conjunto de teste\n\n\n::: {.cell}\n\n```{.r .cell-code}\najusreg.lasso2 <- glmnet(x_treino, y_treino, alpha=1, lambda = m_lamb1)\ny_prev <- predict(ajusreg.lasso2, s = m_lamb1, newx = x_teste)\n# Metricas de desempenho\nsqrt(mean((y_prev - y_teste)^2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.300859\n```\n:::\n:::\n\n\n## Comparando com a seleção de modelos usando o BIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaps)\n## Best Subset \nmod1.bs <- regsubsets(brozek ~ . , data = conj_treino, nvmax = 14)\nsum.mod1bs <- summary(mod1.bs)\nsum.mod1bs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSubset selection object\nCall: regsubsets.formula(brozek ~ ., data = conj_treino, nvmax = 14)\n13 Variables  (and intercept)\n          Forced in Forced out\nidade         FALSE      FALSE\npeso          FALSE      FALSE\naltura        FALSE      FALSE\npescoco       FALSE      FALSE\ntorax         FALSE      FALSE\nabdom         FALSE      FALSE\nquadril       FALSE      FALSE\ncoxa          FALSE      FALSE\njoelho        FALSE      FALSE\ntornozelo     FALSE      FALSE\nbiceps        FALSE      FALSE\nantebraco     FALSE      FALSE\npulso         FALSE      FALSE\n1 subsets of each size up to 13\nSelection Algorithm: exhaustive\n          idade peso altura pescoco torax abdom quadril coxa joelho tornozelo\n1  ( 1 )  \" \"   \" \"  \" \"    \" \"     \" \"   \"*\"   \" \"     \" \"  \" \"    \" \"      \n2  ( 1 )  \" \"   \"*\"  \" \"    \" \"     \" \"   \"*\"   \" \"     \" \"  \" \"    \" \"      \n3  ( 1 )  \" \"   \"*\"  \" \"    \" \"     \" \"   \"*\"   \" \"     \" \"  \" \"    \" \"      \n4  ( 1 )  \" \"   \"*\"  \" \"    \" \"     \" \"   \"*\"   \" \"     \" \"  \" \"    \" \"      \n5  ( 1 )  \" \"   \"*\"  \" \"    \" \"     \" \"   \"*\"   \" \"     \"*\"  \" \"    \" \"      \n6  ( 1 )  \" \"   \"*\"  \" \"    \"*\"     \" \"   \"*\"   \" \"     \" \"  \" \"    \" \"      \n7  ( 1 )  \" \"   \"*\"  \" \"    \"*\"     \" \"   \"*\"   \"*\"     \"*\"  \" \"    \" \"      \n8  ( 1 )  \"*\"   \"*\"  \" \"    \"*\"     \" \"   \"*\"   \"*\"     \"*\"  \" \"    \" \"      \n9  ( 1 )  \"*\"   \"*\"  \" \"    \"*\"     \" \"   \"*\"   \"*\"     \"*\"  \" \"    \" \"      \n10  ( 1 ) \"*\"   \"*\"  \"*\"    \"*\"     \" \"   \"*\"   \"*\"     \"*\"  \" \"    \" \"      \n11  ( 1 ) \"*\"   \"*\"  \"*\"    \"*\"     \" \"   \"*\"   \"*\"     \"*\"  \" \"    \"*\"      \n12  ( 1 ) \"*\"   \"*\"  \"*\"    \"*\"     \" \"   \"*\"   \"*\"     \"*\"  \"*\"    \"*\"      \n13  ( 1 ) \"*\"   \"*\"  \"*\"    \"*\"     \"*\"   \"*\"   \"*\"     \"*\"  \"*\"    \"*\"      \n          biceps antebraco pulso\n1  ( 1 )  \" \"    \" \"       \" \"  \n2  ( 1 )  \" \"    \" \"       \" \"  \n3  ( 1 )  \" \"    \" \"       \"*\"  \n4  ( 1 )  \" \"    \"*\"       \"*\"  \n5  ( 1 )  \" \"    \"*\"       \"*\"  \n6  ( 1 )  \"*\"    \"*\"       \"*\"  \n7  ( 1 )  \" \"    \"*\"       \"*\"  \n8  ( 1 )  \" \"    \"*\"       \"*\"  \n9  ( 1 )  \"*\"    \"*\"       \"*\"  \n10  ( 1 ) \"*\"    \"*\"       \"*\"  \n11  ( 1 ) \"*\"    \"*\"       \"*\"  \n12  ( 1 ) \"*\"    \"*\"       \"*\"  \n13  ( 1 ) \"*\"    \"*\"       \"*\"  \n```\n:::\n\n```{.r .cell-code}\nnames(sum.mod1bs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"which\"  \"rsq\"    \"rss\"    \"adjr2\"  \"cp\"     \"bic\"    \"outmat\" \"obj\"   \n```\n:::\n\n```{.r .cell-code}\nplot(sum.mod1bs$bic,xlab=\"Numero de Variaveis\",ylab=\"BIC\")\nwhich.min(sum.mod1bs$bic)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\npoints(4,sum.mod1bs$bic[4],pch=20,col=\"red\")\n```\n\n::: {.cell-output-display}\n![](Aula05A_files/figure-html/outro-1.png){width=90%}\n:::\n:::\n\n\n## Ajustando no lm() e vendo o erro no conjunto de teste\n\nObservando so resultados de erro vemos que tanto a regressão Ridge como o LASSO apresentaram valores de erro maiores que o modelo definido através da melhor seleção de modelos (best subset regression). Aqui usamos o BIC como critério de deleção de variáveis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod1a.lm <- lm(brozek ~ peso + abdom + antebraco + pulso,data=conj_treino)\nsummary(mod1a.lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = brozek ~ peso + abdom + antebraco + pulso, data = conj_treino)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-9.7403 -2.8496 -0.1399  2.9035  8.5253 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -30.29197    7.02195  -4.314 2.43e-05 ***\npeso         -0.12440    0.02400  -5.182 4.97e-07 ***\nabdom         0.92885    0.05554  16.723  < 2e-16 ***\nantebraco     0.51813    0.17193   3.014 0.002885 ** \npulso        -1.61145    0.43290  -3.722 0.000251 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.998 on 219 degrees of freedom\nMultiple R-squared:  0.7369,\tAdjusted R-squared:  0.7321 \nF-statistic: 153.4 on 4 and 219 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\nsqrt(mean((conj_teste$brozek - predict(mod1a.lm, conj_teste)) ^ 2)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.231517\n```\n:::\n:::\n",
    "supporting": [
      "Aula05A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}