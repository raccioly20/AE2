retornos_carteira_ot <- Return.portfolio(
R = retornos_ativos , #XTS dos retornos dos ativos
weights = pesos_otimos, #vetor com os pesos da carteira otima
rebalance_on = "months"#parametro que define a periodicidade do rebalanceamento
)
xts::first(retornos_carteira_ot,10)
plot(retornos_carteira_ot)
# chart.CumReturns(R = retornos_carteira_ot , wealth.index = FALSE , legend.loc = 'topright' , plot.engine = "plotly")
plot(apply.monthly(retornos_carteira_ot, sum))
# chart.CumReturns(R = retornos_carteira_ot , wealth.index = FALSE , legend.loc = 'topright' , plot.engine = "plotly")
plot(apply.monthly(retornos_carteira_ot, cumsum))
retornos_carteira_ot <- Return.portfolio(
R = retornos_ativos , #XTS dos retornos dos ativos
weights = pesos_otimos, #vetor com os pesos da carteira otima
rebalance_on = "months"#parametro que define a periodicidade do rebalanceamento
)
xts::first(retornos_carteira_ot,10)
chart.CumReturns(R = retornos_carteira_ot , wealth.index = FALSE , legend.loc = 'topright')
chart.CumReturns(R = retornos_carteira_ot , wealth.index = FALSE , legend.loc = 'topleft')
# parametros para imagens
knitr::opts_chunk$set(
fig.width = 9,
fig.asp = 0.618,
fig.retina = 3,
dpi = 300,
out.width = "80%"
)
library(quantmod)
library(tidyverse)
library(xts)
library(PerformanceAnalytics)
library(IntroCompFinR)
library(fPortfolio)
data_inicio = "2018-01-01" #data de início da análise
data_fim = "2022-09-30" #data de fim da análise
tickers = c("VALE3.SA" , "PETR4.SA" , "AAPL" , "MMM")
getSymbols(tickers,from=data_inicio, to=data_fim)
v_close <- VALE3.SA[,"VALE3.SA.Close"]
p_close <- PETR4.SA[,"PETR4.SA.Close"]
a_close <- APPL[,"APPL.Close"]
a_close <- AAPL[,"AAPL.Close"]
m_close <- MMM[,"MMM.Close"]
data_inicio = "2018-01-01" #data de início da análise
data_fim = "2022-09-30" #data de fim da análise
tickers = c("VALE3.SA" , "PETR4.SA" , "AAPL" , "MMM")
getSymbols(tickers,from=data_inicio, to=data_fim)
v_close <- VALE3.SA[,"VALE3.SA.Close"]
p_close <- PETR4.SA[,"PETR4.SA.Close"]
a_close <- AAPL[,"AAPL.Close"]
m_close <- MMM[,"MMM.Close"]
carteira <- merge(v_close, p_close, a_close, m_close)
names(carteira) <- c("Vale", "Petrobras", "Apple", "3M")
knitr::kable(head(carteira))
retornos_ativos <- carteira %>%
PerformanceAnalytics::Return.calculate(. ,method = "log") %>%
na.omit()
xts::first(retornos_ativos,10)
#media e desvio padrao das acoes
media_desvpad <- matrix(data = NA,
nrow = length(tickers),
ncol = 2)
for(i in c(1:length(tickers))) {
media_desvpad[i,1] <- mean(retornos_ativos[,i])
media_desvpad[i,2] <- sd(retornos_ativos[,i])
}
media_desvpad <- as.data.frame(media_desvpad)
media_desvpad <- media_desvpad %>% rename(Retorno = V1) %>%
rename(Desv = V2)
rownames(media_desvpad) <- tickers
#montando matriz de covariancia
cov_acoes <- cov(retornos_ativos)
media_desvpad
cov_acoes
fronteira_eficiente <- fPortfolio::portfolioFrontier(data =as.timeSeries(retornos_ativos))
frontierPlot(fronteira_eficiente,
pch = 20,
cex = 1,
type = "o",
lwd = 2)
monteCarloPoints(fronteira_eficiente,
mcSteps = 5000,
pch = 20,
cex = 0.1,
col = "blue")
di_diario_periodo <- (1 + 0.1375)^(1/360) - 1
carteira_otima <- tangency.portfolio(
er = media_desvpad$Retorno, #retorno esperado
cov.mat = cov_acoes, #matriz de covariancia
risk.free = di_diario_periodo, #taxa livre de risco da economia
shorts = FALSE # parâmetro que proíbe o algoritmo de montar posições vendidas (shorts) na carteira
)
di_diario_periodo <- ((1 + 0.1375)^(1/360) - 1)/2
carteira_otima <- tangency.portfolio(
er = media_desvpad$Retorno, #retorno esperado
cov.mat = cov_acoes, #matriz de covariancia
risk.free = di_diario_periodo, #taxa livre de risco da economia
shorts = FALSE # parâmetro que proíbe o algoritmo de montar posições vendidas (shorts) na carteira
)
di_diario_periodo <- (1 + 0.0375)^(1/360) - 1
carteira_otima <- tangency.portfolio(
er = media_desvpad$Retorno, #retorno esperado
cov.mat = cov_acoes, #matriz de covariancia
risk.free = di_diario_periodo, #taxa livre de risco da economia
shorts = FALSE # parâmetro que proíbe o algoritmo de montar posições vendidas (shorts) na carteira
)
pesos_otimos <- carteira_otima[["weights"]]
names(pesos_otimos) <- c("Vale", "Petrobras", "Eletrobras", "Vivo")
pesos_otimos
di_diario_periodo <- (1 + 0.0375)^(1/360) - 1
carteira_otima <- tangency.portfolio(
er = media_desvpad$Retorno, #retorno esperado
cov.mat = cov_acoes, #matriz de covariancia
risk.free = di_diario_periodo, #taxa livre de risco da economia
shorts = FALSE # parâmetro que proíbe o algoritmo de montar posições vendidas (shorts) na carteira
)
pesos_otimos <- carteira_otima[["weights"]]
names(pesos_otimos) <- c("Vale", "Petrobras", "Apple", "3M")
pesos_otimos
er <- media_desvpad$Retorno
dimnames(cov_acoes) <- list(c("Vale", "Petrobras", "Apple", "3M"),
c("Vale", "Petrobras", "Apple", "3M"))
covmat <- cov_acoes
r.free <- di_diario_periodo
tan.port <- tangency.portfolio(
er ,
covmat,
r.free,
shorts = FALSE)
gmin.port <- globalMin.portfolio(er, covmat)
ef <- efficient.frontier(er, covmat, alpha.min=-2, alpha.max=1.5, nport=20)
attributes(ef)
plot(ef, plot.assets=TRUE, col="blue", pch=16)
points(gmin.port$sd, gmin.port$er, col="green", pch=16, cex=2)
points(tan.port$sd, tan.port$er, col="red", pch=16, cex=2)
text(gmin.port$sd, gmin.port$er, labels="GLOBAL MIN", pos=2)
text(tan.port$sd, tan.port$er, labels="TANGENCY", pos=2)
sr.tan = (tan.port$er - r.free)/tan.port$sd
abline(a=r.free, b=sr.tan, col="green", lwd=2)
er <- media_desvpad$Retorno
dimnames(cov_acoes) <- list(c("Vale", "Petrobras", "Apple", "3M"),
c("Vale", "Petrobras", "Apple", "3M"))
covmat <- cov_acoes
r.free <- di_diario_periodo
tan.port <- tangency.portfolio(
er ,
covmat,
r.free,
shorts = FALSE)
gmin.port <- globalMin.portfolio(er, covmat)
ef <- efficient.frontier(er, covmat, alpha.min=-2, alpha.max=1.5, nport=20)
attributes(ef)
plot(ef, plot.assets=TRUE, col="blue", pch=16)
points(gmin.port$sd, gmin.port$er, col="green", pch=16, cex=2)
points(tan.port$sd, tan.port$er, col="red", pch=16, cex=2)
text(gmin.port$sd, gmin.port$er, labels="GLOBAL MIN", pos=2)
text(tan.port$sd, tan.port$er, labels="TANGENCY", pos=2)
sr.tan = (tan.port$er - r.free)/tan.port$sd
abline(a=r.free, b=sr.tan, col="green", lwd=2)
tickers = c("VALE3.SA" , "PETR4.SA" , "AAPL" , "MMM", "IBM", "GOOG")
getSymbols(tickers,from=data_inicio, to=data_fim)
v_close <- VALE3.SA[,"VALE3.SA.Close"]
p_close <- PETR4.SA[,"PETR4.SA.Close"]
a_close <- AAPL[,"AAPL.Close"]
m_close <- MMM[,"MMM.Close"]
i_close <- IBM[,"IBM.Close"]
g_close <- GOOG[,"GOOG.Close"]
carteira <- merge(v_close, p_close, a_close, m_close,  i_close, g_close)
names(carteira) <- c("Vale", "Petrobras", "Apple", "3M", "IBM", "Google")
knitr::kable(head(carteira))
retornos_ativos <- carteira %>%
PerformanceAnalytics::Return.calculate(. ,method = "log") %>%
na.omit()
xts::first(retornos_ativos,10)
#media e desvio padrao das acoes
media_desvpad <- matrix(data = NA,
nrow = length(tickers),
ncol = 2)
for(i in c(1:length(tickers))) {
media_desvpad[i,1] <- mean(retornos_ativos[,i])
media_desvpad[i,2] <- sd(retornos_ativos[,i])
}
media_desvpad <- as.data.frame(media_desvpad)
media_desvpad <- media_desvpad %>% rename(Retorno = V1) %>%
rename(Desv = V2)
rownames(media_desvpad) <- tickers
#montando matriz de covariancia
cov_acoes <- cov(retornos_ativos)
media_desvpad
cov_acoes
fronteira_eficiente <- fPortfolio::portfolioFrontier(data =as.timeSeries(retornos_ativos))
frontierPlot(fronteira_eficiente,
pch = 20,
cex = 1,
type = "o",
lwd = 2)
monteCarloPoints(fronteira_eficiente,
mcSteps = 5000,
pch = 20,
cex = 0.1,
col = "blue")
di_diario_periodo <- (1 + 0.0375)^(1/360) - 1
carteira_otima <- tangency.portfolio(
er = media_desvpad$Retorno, #retorno esperado
cov.mat = cov_acoes, #matriz de covariancia
risk.free = di_diario_periodo, #taxa livre de risco da economia
shorts = FALSE # parâmetro que proíbe o algoritmo de montar posições vendidas (shorts) na carteira
)
data_inicio = "2016-01-01" #data de início da análise
data_fim = "2019-12-31" #data de fim da análise
tickers = c("VALE3.SA" , "PETR4.SA" , "AAPL" , "MMM", "IBM", "GOOG")
getSymbols(tickers,from=data_inicio, to=data_fim)
v_close <- VALE3.SA[,"VALE3.SA.Close"]
p_close <- PETR4.SA[,"PETR4.SA.Close"]
a_close <- AAPL[,"AAPL.Close"]
m_close <- MMM[,"MMM.Close"]
i_close <- IBM[,"IBM.Close"]
g_close <- GOOG[,"GOOG.Close"]
carteira <- merge(v_close, p_close, a_close, m_close,  i_close, g_close)
names(carteira) <- c("Vale", "Petrobras", "Apple", "3M", "IBM", "Google")
knitr::kable(head(carteira))
retornos_ativos <- carteira %>%
PerformanceAnalytics::Return.calculate(. ,method = "log") %>%
na.omit()
xts::first(retornos_ativos,10)
#media e desvio padrao das acoes
media_desvpad <- matrix(data = NA,
nrow = length(tickers),
ncol = 2)
for(i in c(1:length(tickers))) {
media_desvpad[i,1] <- mean(retornos_ativos[,i])
media_desvpad[i,2] <- sd(retornos_ativos[,i])
}
media_desvpad <- as.data.frame(media_desvpad)
media_desvpad <- media_desvpad %>% rename(Retorno = V1) %>%
rename(Desv = V2)
rownames(media_desvpad) <- tickers
#montando matriz de covariancia
cov_acoes <- cov(retornos_ativos)
media_desvpad
cov_acoes
fronteira_eficiente <- fPortfolio::portfolioFrontier(data =as.timeSeries(retornos_ativos))
frontierPlot(fronteira_eficiente,
pch = 20,
cex = 1,
type = "o",
lwd = 2)
monteCarloPoints(fronteira_eficiente,
mcSteps = 5000,
pch = 20,
cex = 0.1,
col = "blue")
di_diario_periodo <- (1 + 0.0375)^(1/360) - 1
carteira_otima <- tangency.portfolio(
er = media_desvpad$Retorno, #retorno esperado
cov.mat = cov_acoes, #matriz de covariancia
risk.free = di_diario_periodo, #taxa livre de risco da economia
shorts = FALSE # parâmetro que proíbe o algoritmo de montar posições vendidas (shorts) na carteira
)
pesos_otimos <- carteira_otima[["weights"]]
names(pesos_otimos) <- c("Vale", "Petrobras", "Apple", "3M", "IBM", "Google")
pesos_otimos
er <- media_desvpad$Retorno
dimnames(cov_acoes) <- list(c("Vale", "Petrobras", "Apple", "3M"),
c("Vale", "Petrobras", "Apple", "3M"))
er <- media_desvpad$Retorno
dimnames(cov_acoes) <- list(c("Vale", "Petrobras", "Apple", "3M", "IBM", "Google"),  c("Vale", "Petrobras", "Apple", "3M", "IBM", "Google"))
covmat <- cov_acoes
r.free <- di_diario_periodo
tan.port <- tangency.portfolio(
er ,
covmat,
r.free,
shorts = FALSE)
gmin.port <- globalMin.portfolio(er, covmat)
ef <- efficient.frontier(er, covmat, alpha.min=-2, alpha.max=1.5, nport=20)
attributes(ef)
plot(ef, plot.assets=TRUE, col="blue", pch=16)
points(gmin.port$sd, gmin.port$er, col="green", pch=16, cex=2)
points(tan.port$sd, tan.port$er, col="red", pch=16, cex=2)
text(gmin.port$sd, gmin.port$er, labels="GLOBAL MIN", pos=2)
text(tan.port$sd, tan.port$er, labels="TANGENCY", pos=2)
sr.tan = (tan.port$er - r.free)/tan.port$sd
abline(a=r.free, b=sr.tan, col="green", lwd=2)
retornos_ativos <- carteira %>%
PerformanceAnalytics::Return.calculate(. ,method = "discrete") %>%
na.omit()
xts::first(retornos_ativos,10)
#media e desvio padrao das acoes
media_desvpad <- matrix(data = NA,
nrow = length(tickers),
ncol = 2)
for(i in c(1:length(tickers))) {
media_desvpad[i,1] <- mean(retornos_ativos[,i])
media_desvpad[i,2] <- sd(retornos_ativos[,i])
}
media_desvpad <- as.data.frame(media_desvpad)
media_desvpad <- media_desvpad %>% rename(Retorno = V1) %>%
rename(Desv = V2)
rownames(media_desvpad) <- tickers
#montando matriz de covariancia
cov_acoes <- cov(retornos_ativos)
media_desvpad
cov_acoes
fronteira_eficiente <- fPortfolio::portfolioFrontier(data =as.timeSeries(retornos_ativos))
frontierPlot(fronteira_eficiente,
pch = 20,
cex = 1,
type = "o",
lwd = 2)
monteCarloPoints(fronteira_eficiente,
mcSteps = 5000,
pch = 20,
cex = 0.1,
col = "blue")
di_diario_periodo <- (1 + 0.0375)^(1/360) - 1
carteira_otima <- tangency.portfolio(
er = media_desvpad$Retorno, #retorno esperado
cov.mat = cov_acoes, #matriz de covariancia
risk.free = di_diario_periodo, #taxa livre de risco da economia
shorts = FALSE # parâmetro que proíbe o algoritmo de montar posições vendidas (shorts) na carteira
)
pesos_otimos <- carteira_otima[["weights"]]
names(pesos_otimos) <- c("Vale", "Petrobras", "Apple", "3M", "IBM", "Google")
pesos_otimos
er <- media_desvpad$Retorno
dimnames(cov_acoes) <- list(c("Vale", "Petrobras", "Apple", "3M", "IBM", "Google"),  c("Vale", "Petrobras", "Apple", "3M", "IBM", "Google"))
covmat <- cov_acoes
r.free <- di_diario_periodo
tan.port <- tangency.portfolio(
er ,
covmat,
r.free,
shorts = FALSE)
gmin.port <- globalMin.portfolio(er, covmat)
ef <- efficient.frontier(er, covmat, alpha.min=-2, alpha.max=1.5, nport=20)
attributes(ef)
plot(ef, plot.assets=TRUE, col="blue", pch=16)
points(gmin.port$sd, gmin.port$er, col="green", pch=16, cex=2)
points(tan.port$sd, tan.port$er, col="red", pch=16, cex=2)
text(gmin.port$sd, gmin.port$er, labels="GLOBAL MIN", pos=2)
text(tan.port$sd, tan.port$er, labels="TANGENCY", pos=2)
sr.tan = (tan.port$er - r.free)/tan.port$sd
abline(a=r.free, b=sr.tan, col="green", lwd=2)
# parametros para imagens
knitr::opts_chunk$set(
fig.width = 9,
fig.asp = 0.618,
fig.retina = 3,
dpi = 300,
out.width = "80%"
)
library(quantmod)
library(tidyverse)
library(xts)
library(qrmtools)
library(PortfolioAnalytics)
library(DEoptim)
library(ROI)
require(ROI.plugin.quadprog)
require(ROI.plugin.glpk)
data_inicio = "2016-01-01" #data de início da análise
data_fim = "2019-12-31" #data de fim da análise
tickers = c("VALE3.SA" , "PETR4.SA" , "AAPL" , "MMM", "IBM", "GOOG")
getSymbols(tickers,from=data_inicio, to=data_fim)
v_close <- VALE3.SA[,"VALE3.SA.Close"]
p_close <- PETR4.SA[,"PETR4.SA.Close"]
a_close <- AAPL[,"AAPL.Close"]
m_close <- MMM[,"MMM.Close"]
i_close <- IBM[,"IBM.Close"]
g_close <- GOOG[,"GOOG.Close"]
carteira <- merge(v_close, p_close, a_close, m_close,  i_close, g_close)
names(carteira) <- c("Vale", "Petrobras", "Apple", "3M", "IBM", "Google")
knitr::kable(head(carteira))
retornos_ativos <- carteira %>% returns(. ,method = "logarithmic") %>%
na.omit()
xts::first(retornos_ativos,10)
carteira <- merge(v_close, p_close, a_close, m_close,  i_close, g_close)
names(carteira) <- c("Vale", "Petro", "Apple", "3M", "IBM", "GOOG")
knitr::kable(head(carteira))
retornos_ativos <- carteira %>% returns(. ,method = "logarithmic") %>%
na.omit()
xts::first(retornos_ativos,10)
View(retornos_ativos)
R <- retornos_ativos
funds <- colnames(R)
# initial portfolio object
init <- portfolio.spec(assets=funds)
# initial constraints
init <- add.constraint(portfolio=init, type="full_investment")
init <- add.constraint(portfolio=init, type="box", min=0.15, max=0.45)
data_inicio = "2016-01-01" #data de início da análise
data_fim = "2019-12-31" #data de fim da análise
tickers = c("VALE3.SA" , "PETR4.SA" , "AAPL" , "IBM", "GOOG")
getSymbols(tickers,from=data_inicio, to=data_fim)
v_close <- VALE3.SA[,"VALE3.SA.Close"]
p_close <- PETR4.SA[,"PETR4.SA.Close"]
a_close <- AAPL[,"AAPL.Close"]
i_close <- IBM[,"IBM.Close"]
g_close <- GOOG[,"GOOG.Close"]
carteira <- merge(v_close, p_close, a_close, m_close,  i_close, g_close)
names(carteira) <- c("Vale", "Petro", "Apple", "IBM", "GOOG")
data_inicio = "2016-01-01" #data de início da análise
data_fim = "2019-12-31" #data de fim da análise
tickers = c("VALE3.SA" , "PETR4.SA" , "AAPL" , "IBM", "GOOG")
getSymbols(tickers,from=data_inicio, to=data_fim)
v_close <- VALE3.SA[,"VALE3.SA.Close"]
p_close <- PETR4.SA[,"PETR4.SA.Close"]
a_close <- AAPL[,"AAPL.Close"]
i_close <- IBM[,"IBM.Close"]
g_close <- GOOG[,"GOOG.Close"]
carteira <- merge(v_close, p_close, a_close, i_close, g_close)
names(carteira) <- c("Vale", "Petro", "Apple", "IBM", "GOOG")
knitr::kable(head(carteira))
retornos_ativos <- carteira %>% returns(. ,method = "logarithmic") %>%
na.omit()
xts::first(retornos_ativos,10)
R <- retornos_ativos
funds <- colnames(R)
# initial portfolio object
init <- portfolio.spec(assets=funds)
# initial constraints
init <- add.constraint(portfolio=init, type="full_investment")
init <- add.constraint(portfolio=init, type="box", min=0.15, max=0.45)
init <- add.constraint(portfolio=init, type="group",
groups=list(c(1, 3),
c(2, 4, 5)),
group_min=0.05,
group_max=0.7)
# create mean-var portfolio
meanvar.portf <- add.objective(portfolio=init, type="risk", name="var", risk_aversion=10)
meanvar.portf <- add.objective(portfolio=meanvar.portf, type="return", name="mean")
# mean-var efficient frontier
meanvar.ef <- create.EfficientFrontier(R=R, portfolio=init, type="mean-StdDev")
meanvar.ef
summary(meanvar.ef, digits=2)
meanvar.ef$frontier
# The RAR.text argument can be used for the risk-adjusted-return name on the legend,
# by default it is 'Modified Sharpe Ratio'
chart.EfficientFrontier(meanvar.ef, match.col="StdDev", type="l", RAR.text="Sharpe Ratio", pch=4)
data_inicio = "2016-01-01" #data de início da análise
data_fim = "2019-12-31" #data de fim da análise
tickers = c("VALE3.SA" , "PETR4.SA" , "AAPL" , "IBM", "GOOG")
getSymbols(tickers,from=data_inicio, to=data_fim)
# parametros para imagens
knitr::opts_chunk$set(
fig.width = 9,
fig.asp = 0.618,
fig.retina = 3,
dpi = 300,
out.width = "80%"
)
library(quantmod)
library(tidyverse)
library(xts)
library(qrmtools)
library(PortfolioAnalytics)
library(DEoptim)
library(ROI)
require(ROI.plugin.quadprog)
require(ROI.plugin.glpk)
data_inicio = "2016-01-01" #data de início da análise
data_fim = "2019-12-31" #data de fim da análise
tickers = c("VALE3.SA" , "PETR4.SA" , "AAPL" , "IBM", "GOOG")
getSymbols(tickers,from=data_inicio, to=data_fim)
v_close <- VALE3.SA[,"VALE3.SA.Close"]
p_close <- PETR4.SA[,"PETR4.SA.Close"]
a_close <- AAPL[,"AAPL.Close"]
i_close <- IBM[,"IBM.Close"]
g_close <- GOOG[,"GOOG.Close"]
carteira <- merge(v_close, p_close, a_close, i_close, g_close)
names(carteira) <- c("Vale", "Petro", "Apple", "IBM", "GOOG")
knitr::kable(head(carteira))
retornos_ativos <- carteira %>% returns(. ,method = "logarithmic") %>%
na.omit()
xts::first(retornos_ativos,10)
R <- retornos_ativos
funds <- colnames(R)
# initial portfolio object
init <- portfolio.spec(assets=funds)
# initial constraints
init <- add.constraint(portfolio=init, type="full_investment")
init <- add.constraint(portfolio=init, type="box", min=0.15, max=0.45)
init <- add.constraint(portfolio=init, type="group",
groups=list(c(1, 3),
c(2, 4, 5)),
group_min=0.05,
group_max=0.7)
# create mean-var portfolio
meanvar.portf <- add.objective(portfolio=init, type="risk", name="var", risk_aversion=10)
meanvar.portf <- add.objective(portfolio=meanvar.portf, type="return", name="mean")
# create efficient frontiers
# mean-var efficient frontier
meanvar.ef <- create.EfficientFrontier(R=R, portfolio=init, type="mean-StdDev")
meanvar.ef
summary(meanvar.ef, digits=2)
meanvar.ef$frontier
# The RAR.text argument can be used for the risk-adjusted-return name on the legend,
# by default it is 'Modified Sharpe Ratio'
chart.EfficientFrontier(meanvar.ef, match.col="StdDev", type="l", RAR.text="Sharpe Ratio", pch=4)
# Chart the asset weights along the efficient frontier
chart.Weights.EF(meanvar.ef, colorset=bluemono, match.col="StdDev")
# create efficient frontiers
# mean-var efficient frontier
meanvar.ef <- create.EfficientFrontier(R=R, portfolio=init, type="mean-StdDev")
meanvar.ef
summary(meanvar.ef, digits=2)
meanvar.ef$frontier
# The RAR.text argument can be used for the risk-adjusted-return name on the legend,
# by default it is 'Modified Sharpe Ratio'
chart.EfficientFrontier(meanvar.ef, match.col="StdDev", type="l", RAR.text="Sharpe Ratio", pch=4)
# Chart the asset weights along the efficient frontier
chart.EF.Weights(meanvar.ef, colorset=bluemono, match.col="StdDev")
